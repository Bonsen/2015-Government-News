package com.news.content.bo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.annotation.SuppressLint;
import android.app.Fragment;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.TextView;

import com.example.news.R;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.news.data.news.DataProvider;

@SuppressLint("NewApi")
public class ContentFragment extends Fragment {
	//
	private PullToRefreshListView mPullRefreshListView;
	private static ArrayList<Map<String, Object>> listItem = new ArrayList<Map<String, Object>>();
	ContentAdapter contentAdapter = null;
	private TextView newscount;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState){
		View view = inflater.inflate(R.layout.fragment_contentfargment, null);
		// 更具栏目名称对对标题进行设置
		SharedPreferences sharedPreferences = (getActivity())
				.getSharedPreferences("ShareData", Context.MODE_PRIVATE);
		String cColumn = sharedPreferences.getString("cColumn", "");
		TextView tv = (TextView) view.findViewById(R.id.column);
		tv.setText(cColumn);
		mPullRefreshListView = (PullToRefreshListView) view
				.findViewById(R.id.pull_refresh_list);
		// 设定下拉监听函数
		mPullRefreshListView
				.setOnRefreshListener(new OnRefreshListener<ListView>() {
					@Override
					public void onRefresh(
							PullToRefreshBase<ListView> refreshView) {
						String label = DateUtils.formatDateTime(getActivity()
								.getApplicationContext(), System
								.currentTimeMillis(),
								DateUtils.FORMAT_SHOW_TIME
										| DateUtils.FORMAT_SHOW_DATE
										| DateUtils.FORMAT_ABBREV_ALL);

						// Update the LastUpdatedLabel
						refreshView.getLoadingLayoutProxy()
								.setLastUpdatedLabel(label);

						// Do work to refresh the list here.
						new GetDataTask().execute();
					}
				});

		mPullRefreshListView.setMode(Mode.PULL_FROM_START);// 设置底部下拉刷新模式

		// 如果是搜索界面传过来的值，进行搜索处理
		try {
			Bundle bundle;
			if(getArguments()==null)
			{
				bundle=new Bundle();
				System.out.println("getArguments is null");
			}
			else
			{
				bundle = getArguments();
			}
			
			if (bundle.getString("search","")!="") {
				// 进行搜索操作
				listItem = (ArrayList<Map<String, Object>>) DataProvider
						.showSearchNewsList(getActivity(),
								bundle.getString("startTime"),
								bundle.getString("endTime"),
								bundle.getString("keyWord"));
			} 
			else// 否则正常处理
			{
				listItem = (ArrayList<Map<String, Object>>) DataProvider
						.showNewsList(getActivity());
				System.out.println("listItem size is : " + listItem.size());
			}
			newscount = (TextView) view.findViewById(R.id.newscount);
			newscount.setText(listItem.size() + "条新闻");
			System.out.println("listItem size is : " + listItem.size());
			ListView actualListView = mPullRefreshListView.getRefreshableView();
			contentAdapter = new ContentAdapter(listItem, getActivity());
			actualListView.setAdapter(contentAdapter);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return view;
	}

	private class GetDataTask extends
			AsyncTask<Void, Void, HashMap<String, Object>> {

		// 后台处理部分
		@Override
		protected HashMap<String, Object> doInBackground(Void... params) {
			// Simulates a background job.
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
			}
			HashMap<String, Object> map = new HashMap<String, Object>();
			try {

				map = new HashMap<String, Object>();
				map.put("title", "手动阀手动阀");
				map.put("content", "a 阿三发射点发射点");
				map.put("time", "2014");
				map.put("status", "1");

			} catch (Exception e) {
				// TODO: handle exception
				System.out.print("error!");
				return null;
			}
			return map;
		}

		@Override
		protected void onPostExecute(HashMap<String, Object> result) {
			// 在头部增加新添内容
			try {
				listItem.add(0, result);// 监听的是指向，不能new
				// 通知程序数据集已经改变，如果不做通知，那么将不会刷新
				contentAdapter.notifyDataSetChanged();
				// Call onRefreshComplete when the list has been refreshed.
				mPullRefreshListView.onRefreshComplete();
			} catch (Exception e) {
				// TODO: handle exception
				System.out.print(e.getMessage());
			}
			super.onPostExecute(result);
		}
	}
}
